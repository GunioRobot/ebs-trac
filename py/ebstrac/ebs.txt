Unit tests for the ebs.py module.

This module primarily computes two graphs:

	1. a probability density function for ship date, and

	2. a box-and-whisker plot for developer ship date.

To compute these graphs, we need three arguments:

	* history: (user, ticket, estimated_hours, actual_hours, velocity)

	  Note that velocity is estimate / actual.

		>>> history = (
		... ('mark', 1, 1.0, 1.0, 1.0), 
		... )

	* todo: (user, ticket, estimated_hours, actual_hours, left)

		>>> todo = (
		... ('mark', 2, 2.0, 1.0, 1.0),
		... )

	* timecards: (user, date, total_hours)

	  One entry for each unique user/date combination.

			   September 2010   
			Su Mo Tu We Th Fr Sa
				  1  2  3  4
			 5  6  7  8  9 10 11
			12 13 14 15 16 17 18
			19 20 21 22 23 24 25
			26 27 28 29 30      

		>>> from datetime import date, timedelta
		>>> dt1 = date(2010, 9, 1)
		>>> timecards = (
		... ('mark', dt1, 1.0),
		... )

The above three arguments define a very simple example, with 

	* one user,
	* no difference between the historical estimate and the actual,
	* a task with one hour left on it, and
	* a user that works one hour per day (based on timecards)

For this example, the probability density function data should have a
single point---it is 100% likely that this milestone will be done in
a day.

	>>> from ebs import history_to_plotdata
	>>> pdf, devs = history_to_plotdata(history, todo, timecards)
	>>> len(pdf)
	1

The x-coordinate will be the expected ship date, and the y-coordinate
is the probability that the ship date will be on or less than that date.

For this toy, example, the one point has a y-value of 100.

	>>> x, y = pdf[0]
	>>> y
	100

Checking the x-coordinate is a bit trickier, it should be one workday after
today's date.  We'll use one of the utilities in the ebs module to
help us.
	
	>>> import ebs
	>>> shipdate = ebs.advance_n_workdays(date.today(), 1)
	>>> x - shipdate == timedelta(0) or "%s, %s" % (x, shipdate)
	True

The data for the developer box-and-whisker plot should have the following
fields for each developer: min, 1st quartile, median, 3rd quartile,
and maximum.

	>>> len(devs)
	1
	>>> len(devs[0])
	6
	>>> dev, min, q1, q2, q3, max = devs[0]
	>>> dev
	'mark'

In this contrived example, since there is no variation in the velocity,
all the date statistics are the same.

	>>> min - shipdate == timedelta(0) or "%s, %s" % (min, shipdate)
	True
	>>> q1 - shipdate == timedelta(0) or "%s, %s" % (q1, shipdate)
	True
	>>> q2 - shipdate == timedelta(0)  or "%s, %s" % (q2, shipdate) 
	True
	>>> q3 - shipdate == timedelta(0)  or "%s, %s" % (q3, shipdate) 
	True
	>>> max - shipdate == timedelta(0)  or "%s, %s" % (max, shipdate) 
	True

======================================================================

A slightly more complicated example: two devs.

	* two devlopers:
		- one that works 5 hours a day, and
		- one that works 1 hour a day.
		- no difference between estimated and actual labor
	* two tasks:
		- one for each user
		- both with five hours of remaining effort.

======================================================================


(dev, ticket, estimated, actual, velocity)

	>>> history = (
	... ('mark', 1, 1.0, 1.0, 1.0), 
	... ('paul', 1, 1.0, 1.0, 1.0), 
	... )

(dev, ticket, estimated_hours, actual_hours, left)

	>>> todo = (
	... ('mark', 2, 6.0, 1.0, 5.0),
	... ('paul', 3, 5.0, 0.0, 5.0),
	... )


(user, date, total_hours) 

		   September 2010   
		Su Mo Tu We Th Fr Sa
			  1  2  3  4
		 5  6  7  8  9 10 11
		12 13 14 15 16 17 18
		19 20 21 22 23 24 25
		26 27 28 29 30      

	>>> from datetime import date
	>>> dt1 = date(2010, 9, 1)
	>>> dt2 = date(2010, 9, 2)
	>>> timecards = (
	... ('mark', dt1, 4.0),
	... ('mark', dt2, 6.0),
	... ('paul', dt1, 0.5),
	... ('paul', dt2, 1.5),
	... )


There is still no variation in velocity, so the PDF should have one entry,
with 100% probability.

	>>> pdf, devs = history_to_plotdata(history, todo, timecards)
	>>> len(pdf)
	1
	>>> dt, density = pdf[0]
	>>> density
	100

The ship date, given these inputs, should be five working days from now.

	>>> shipdate = ebs.advance_n_workdays(date.today(), 5)
	>>> dt - shipdate  == timedelta(0) or "%s, %s" % (dt, shipdate)
	True
